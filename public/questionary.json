[
    {
      "question": "What is useState and how does it work in React?",
      "answer": "useState is a React Hook that allows you to add state to functional components. It returns an array with two values: the current state and a function to update it.It's one of the most fundamental hooks in React, enabling components to remember and manage information between renders. "
    },
    {
      "question": "What is the purpose of useEffect in React?",
      "answer": "useEffect is a React Hook used to perform side effects in functional components. These can include data fetching, subscriptions, timers, manually changing the DOM, any operation that interacts with the outside world and more. ;"
    },
    {
      "question": "What is a custom hook in React and when should you use one?",
      "answer": "A custom hook is a JavaScript function that starts with 'use' and allows you to reuse stateful logic across components. It's a powerful pattern for extracting component logic into reusable functions. you can use it when multiple components need the same functionalit"
    },
    {
      "question": "Difference between controlled and uncontrolled components? Which one is better?",
      "answer": "In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.In uncontrolled components, the DOM maintains the state internally. You use refs to access the values when needed. In contsrolled any changes to the input call an event handler that updates the state (onChange={handleChange}). Both has different usecase.Controlled inputs for key fields you care about dynamically.Otherside uncontrolled ones (with refs) for optional fields or for less interactivity."
    },
    {
      "question": "Tell us something about useFormStatus() (explore and explain)",
      "answer": "useFormStatus is a hook from React (or frameworks like Next.js App Router with Server Actions) used within form components. Its gives you status information of the last form submission. const { pending, data, method, action } = useFormStatus().useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop.;"
    }
  ]
    